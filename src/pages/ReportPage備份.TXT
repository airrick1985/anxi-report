<template>
  <v-container class="py-6">
    <h2 class="text-h5 mb-4">戶別：{{ unitId }}</h2>

    <v-alert v-if="error" type="error" class="mb-4" closable>{{ error }}</v-alert>
    <div v-if="loading" class="text-center pa-4">
      <v-progress-circular indeterminate color="primary" />
    </div>

    <v-table v-else-if="records.length > 0" class="elevation-1">
      <thead>
        <tr>
          <th>建檔時間</th>
          <th>驗屋日期</th>
          <th>階段</th>
          <th>區域</th>
          <th>分類</th>
          <th>細項</th>
          <th>說明與照片</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="r in records" :key="r.key">
          <td>{{ r.createdAt }}</td>
          <td>{{ r.inspectionDate }}</td>
          <td>{{ r.inspectionStage }}</td>
          <td>{{ r.area }}</td>
          <td>{{ r.category }}</td>
          <td>{{ r.subcategory }}</td>
          <td>
            <div>{{ r.description }}</div>
            <div class="photo-row" v-if="getRecordPhotos(r).length > 0">
              <v-img
                v-for="(url, idx) in getRecordPhotos(r)"
                :key="`${r.key}-photo-${idx}`"
                :src="url"
                alt="缺失照片"
                class="photo-thumb"
                @click="zoomImage(url)"
                @error="(e) => handleImageError(e, url, r.key, `photo${idx+1}`)"
                @load="() => handleImageLoad(url, r.key, `photo${idx+1}`)"
                aspect-ratio="1.2"
                contain
              >
                <template v-slot:placeholder>
                  <v-row class="fill-height ma-0" align="center" justify="center">
                    <v-progress-circular indeterminate color="grey-lighten-2" size="32"></v-progress-circular>
                  </v-row>
                </template>
                <template v-slot:error>
                  <v-row class="fill-height ma-0 pa-1" align="center" justify="center" style="background-color: rgba(255,0,0,0.1);">
                    <v-icon color="red-darken-2" size="small">mdi-alert-circle-outline</v-icon>
                    <span style="font-size:9px; color: red; margin-left: 4px; line-height:1.1;">無法載入</span>
                  </v-row>
                </template>
              </v-img>
            </div>
            <div v-else-if="!loading && (r.photo1 || r.photo2 || r.photo3 || r.photo4)" class="no-photos-debug">
              <!-- 此訊息理論上不應出現，因為 getRecordPhotos 應該處理了 -->
              原始照片URL存在但未顯示: P1:{{!!r.photo1}}, P2:{{!!r.photo2}}, P3:{{!!r.photo3}}, P4:{{!!r.photo4}}
            </div>
                     </td>
        </tr>
      </tbody>
    </v-table>
    <v-alert v-else-if="!loading && !error" type="info" class="mt-4">沒有找到相關紀錄。</v-alert>

    <v-dialog v-model="zoomDialog" max-width="90vw" transition="dialog-bottom-transition">
      <v-card>
        <v-toolbar color="primary" dark class="px-2">
            <v-toolbar-title>照片預覽</v-toolbar-title>
            <v-spacer></v-spacer>
            <v-btn icon="mdi-close" @click="zoomDialog = false"></v-btn>
        </v-toolbar>
        <v-card-text class="pa-2 d-flex justify-center align-center" style="min-height: 50vh;">
          <v-img :src="zoomUrl" max-height="80vh" contain @error="zoomImageError">
            <template v-slot:placeholder>
                <v-row class="fill-height ma-0" align="center" justify="center">
                    <v-progress-circular indeterminate color="grey-lighten-2" size="64"></v-progress-circular>
                </v-row>
            </template>
            <template v-slot:error>
                <v-row class="fill-height ma-0" align="center" justify="center" style="background-color: rgba(0,0,0,0.1);">
                    <v-icon color="red" size="x-large">mdi-image-off-outline</v-icon>
                    <p class="mt-2 red--text text--darken-2">放大圖片載入失敗</p>
                </v-row>
            </template>
          </v-img>
        </v-card-text>
      </v-card>
    </v-dialog>
  </v-container>
</template>

<script setup>
import { ref, onMounted } from 'vue';
import { useRoute } from 'vue-router';
// 確保 Vuetify 組件在 main.js 中全局註冊，或者在此處局部導入 (但不推薦用於 Vuetify 3 核心組件)

const route = useRoute();
const unitId = route.query.u;
const token = route.query.t;

const records = ref([]);
const loading = ref(true);
const error = ref('');

const zoomDialog = ref(false);
const zoomUrl = ref('');

function getRecordPhotos(record) {
  const urls = [record.photo1, record.photo2, record.photo3, record.photo4];
  return urls.map((url) => {
    const m = url?.match(/\/d\/([a-zA-Z0-9_-]+)/) || url?.match(/id=([a-zA-Z0-9_-]+)/);
    return m ? `https://lh3.googleusercontent.com/d/${m[1]}=w800` : '';
  }).filter(Boolean);
}


function zoomImage(url) {
  if (!url) {
    console.warn("ZoomImage called with empty/invalid URL:", url);
    error.value = "無法放大無效的圖片連結。" // 給用戶一些反饋
    return;
  }
  console.log("Zooming image:", url);
  zoomUrl.value = url;
  zoomDialog.value = true;
}

function zoomImageError() {
  console.error("❌ 放大圖片載入失敗:", zoomUrl.value);
  // 可以在此處設置一個 dialog 內的錯誤提示
}

function handleImageError(event, url, recordKey, photoField) {
  console.error(`❌ 圖片載入失敗: Key=${recordKey}, Field=${photoField}, URL=${url}`, 'Event:', event);
}

function handleImageLoad(url, recordKey, photoField) {
  console.log(`✅ 圖片成功載入: Key=${recordKey}, Field=${photoField}, URL=${url}`);
}

onMounted(async () => {
  if (!unitId || !token) {
    error.value = '缺少必要參數 (戶別或 token)。';
    loading.value = false;
    return;
  }
  loading.value = true;
  error.value = '';
  records.value = []; // 清空舊數據

  try {
    console.log(`Fetching records for unitId: '${unitId}', token is ${token ? 'present' : 'absent'}.`);
    const response = await fetch('https://vercel-proxy-api2.vercel.app/api/inspection', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        action: 'get_shared_inspection_records',
        unitId,
        token
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API請求失敗: ${response.status} ${response.statusText}. Response: ${errorText.substring(0, 200)}`);
    }

    const json = await response.json();
    console.log('API response full JSON:', JSON.stringify(json, null, 2).substring(0, 500) + "..."); // 打印部分JSON

    if (json.status === 'success') {
      records.value = json.records || [];
      if (records.value.length > 0) {
        console.log(`成功獲取 ${records.value.length} 筆紀錄.`);
        // 詳細檢查第一筆紀錄的 photo 欄位
        const firstRecord = records.value[0];
        console.log("第一筆紀錄內容:", JSON.stringify(firstRecord).substring(0, 300) + "...");
        ['photo1', 'photo2', 'photo3', 'photo4'].forEach(pKey => {
          if (firstRecord && typeof firstRecord[pKey] === 'string' && firstRecord[pKey].trim() !== '') {
            console.log(`第一筆紀錄 ${pKey} URL: `, firstRecord[pKey]);
          } else {
            console.log(`第一筆紀錄 ${pKey} 是空的或無效: `, firstRecord ? firstRecord[pKey] : '紀錄不存在');
          }
        });
      } else {
        console.log("API 回傳成功，但紀錄為空陣列。");
      }
    } else {
      error.value = json.message || '讀取資料失敗 (API 回傳非 success 狀態)。';
      console.error('API Error from json.message:', error.value, 'Full response:', json);
    }
  } catch (e) {
    console.error('Fetch 或處理 API 回應時發生 catch 錯誤:', e);
    error.value = '連線至伺服器或處理資料時發生錯誤：' + e.message;
  } finally {
    loading.value = false;
  }
});
</script>

<style scoped>
th {
  font-weight: bold;
  background-color: #f8f8f8;
  text-align: left;
  padding: 10px 8px;
  font-size: 14px;
}
td {
  padding: 10px 8px;
  vertical-align: top;
  font-size: 14px;
  border-bottom: 1px solid #eee;
}
.photo-row {
  margin-top: 8px;
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}
.photo-thumb {
  width: 100px; /* 固定寬度 */
  height: 80px; /* 固定高度 */
  border: 1px solid #ddd;
  border-radius: 4px;
  cursor: zoom-in;
  background-color: #f0f0f0;
  display: flex; /* 用於 placeholder/error 內容居中 */
  align-items: center;
  justify-content: center;
}
.no-photos-debug {
  font-size: 10px;
  color: orange;
  margin-top: 5px;
}
.v-toolbar-title {
    font-size: 1.1rem;
}
</style>